version: '3.9'
name: observability-example

services:
  # Services
  http-service:
    build:
      dockerfile: ./src/ObservabilityExample.HttpService/Dockerfile
    container_name: http-service
    hostname: http-service
    environment:
      GrpcServiceOptions__Address: "http://grpc-service:8084"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    ports:
      - "8081:8080" # HTTP PORT
    networks:
      - internal-network
    depends_on:
      - grpc-service

  grpc-service:
    build:
      dockerfile: ./src/ObservabilityExample.GrpcService/Dockerfile
    container_name: grpc-service
    hostname: grpc-service
    environment:
      ASPNETCORE_HTTP_PORT: 8080
      ASPNETCORE_GRPC_PORT: 8084
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    ports:
      - "8091:8080" # HTTP PORT
      - "8092:8084" # GRPC PORT
    networks:
      - internal-network

  # Monitoring
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.92.0
    container_name: otel-collector
    restart: unless-stopped
    volumes:
      - ./configs/otlp-collector/otel-collector.yaml:/etc/otel-collector.yaml
    command: [ "--config=/etc/otel-collector.yaml" ]
    ports:
      - "4317:4317"    # OTLP gRPC receiver
      #- "4318:4318"   # OTLP http receiver
      #- "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"    # Prometheus exporter metrics
      #- "1888:1888"   # pprof extension
      #- "13133:13133" # health_check extension
      #- "55679:55679" # zpages extension
    networks:
      - internal-network
    depends_on:
      - jaeger

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./configs/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - internal-network
    depends_on:
      - otel-collector

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.53
    container_name: jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
      JAEGER_DISABLED: true
    ports:
      - "16686:16686"  # serve frontend
      #- "4317:4317"   # accept OpenTelemetry Protocol (OTLP) over gRPC
    networks:
      - internal-network

  # Grafana
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=P@ssw0rd
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - internal-network

volumes:
  postgres_data: { }
  prometheus_data: { }
  grafana_data: { }

networks:
  internal-network: { }
