version: '3.9'
name: observability-example

# TODO split by files

services:
  # Services
  http-service:
    build:
      dockerfile: ./src/ObservabilityExample.HttpService/Dockerfile
      args:
        DOTNET_TAG: ${DOTNET_TAG}
    container_name: http-service
    hostname: http-service
    environment:
      GrpcServiceOptions__Address: "http://grpc-service:8084"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    ports:
      - "8081:8080" # HTTP PORT
    networks:
      - internal-network
    depends_on:
      - grpc-service

  grpc-service:
    build:
      dockerfile: ./src/ObservabilityExample.GrpcService/Dockerfile
      args:
        DOTNET_TAG: ${DOTNET_TAG}
    container_name: grpc-service
    hostname: grpc-service
    environment:
      ASPNETCORE_HTTP_PORT: 8080
      ASPNETCORE_GRPC_PORT: 8084
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      # TODO from secrets or vault
      ConnectionStrings__Example: "Host=postgres;Port=5432;Database=example;Username=example;Password=example"
      ConnectionStrings__Kafka: "kafka:9092"
    ports:
      - "8091:8080" # HTTP PORT
      - "8092:8084" # GRPC PORT
    networks:
      - internal-network

  # Infrastructure
  postgres:
    image: postgres:${POSTGRES_TAG:-latest}
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PG_ROOT_USER_NAME}
      POSTGRES_PASSWORD: ${PG_ROOT_USER_PWD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./configs/postgres/postgresql.conf:/etc/postgresql.conf:ro
      - ./configs/postgres/scripts:/docker-entrypoint-initdb.d
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql.conf"
    ports:
      - "${PG_EXT_PORT}:5432"
    networks:
      - internal-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '4G'

  # kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_TAG:-latest}
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: 'WARN'
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    #    ports:
    #      - "22181:2181"
    networks:
      - internal-network

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_TAG:-latest}
    container_name: kafka
    restart: unless-stopped
    environment:
      # see https://github.com/grumpy-docker/docker-kafka/blob/master/README.md
      KAFKA_BROKER_ID: '0'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_COMPRESSION_TYPE: 'gzip'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'WARN'
    volumes:
      - kafka-data:/var/lib/kafka/data:Z
    depends_on:
      - zookeeper
    ports:
      - "29092:9092"
    networks:
      - internal-network

  schema-registry:
    image: confluentinc/cp-schema-registry:${KAFKA_TAG:-latest}
    container_name: schema-registry
    restart: unless-stopped
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'WARN'
    depends_on:
      - kafka
    networks:
      - internal-network

  akhq:
    image: tchiotludo/akhq:${AKHQ_TAG:-latest}
    container_name: akhq
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8085"
    ports:
      - "8099:8080"
    networks:
      - internal-network
    depends_on:
      - kafka
      - schema-registry

  kafka-exporter:
    image: danielqsj/kafka-exporter:${KAFKA_EXPORTER_TAG:-latest}
    container_name: kafka-exporter
    restart: unless-stopped
    command:
      - "--kafka.server=kafka:9092"
      - "--zookeeper.server=zookeeper:2181"
      - "--use.consumelag.zookeeper"
    ports:
      - "9308:9308"
    depends_on:
      - kafka
      - zookeeper
    networks:
      - internal-network

  # Observability
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:${OTEL_COLLECTOR_TAG:-latest}
    container_name: otel-collector
    restart: unless-stopped
    volumes:
      - ./configs/otlp-collector/otel-collector.yaml:/etc/otel-collector.yaml
    command: [ "--config=/etc/otel-collector.yaml" ]
    ports:
      - "4317:4317"    # OTLP gRPC receiver
      #- "4318:4318"   # OTLP http receiver
      #- "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"    # Prometheus exporter metrics
      #- "1888:1888"   # pprof extension
      #- "13133:13133" # health_check extension
      #- "55679:55679" # zpages extension
    networks:
      - internal-network
    depends_on:
      - jaeger

  # Prometheus postgres exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:${PG_EXPORTER_TAG:-latest}
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_URI: "postgres/example?sslmode=disable"
      DATA_SOURCE_USER: ${PG_ROOT_USER_NAME}
      DATA_SOURCE_PASS: ${PG_ROOT_USER_PWD}
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/additional-queries.yaml"
    command:
      # see https://github.com/prometheus-community/postgres_exporter?tab=readme-ov-file#flags
      - "--collector.stat_activity_autovacuum"
      - "--collector.statio_user_indexes"
    volumes:
      - ./configs/postgres-exporter/additional-queries.yaml:/etc/postgres_exporter/additional-queries.yaml:ro
    ports:
      - "9187:9187"
    networks:
      - internal-network
    depends_on:
      - postgres

  # Prometheus
  prometheus:
    image: prom/prometheus:${PROMETHEUS_TAG:-latest}
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./configs/prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - internal-network
    depends_on:
      - otel-collector
      - postgres-exporter

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_TAG:-latest}
    container_name: jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
      JAEGER_DISABLED: true
    ports:
      - "16686:16686"  # serve frontend
    networks:
      - internal-network

  # Grafana
  grafana:
    image: grafana/grafana:${GRAFANA_TAG:-latest}
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GR_USER_NAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GR_USER_PWD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - internal-network
    depends_on:
      - prometheus

volumes:
  postgres-data: { }
  prometheus-data: { }
  grafana-data: { }
  zookeeper-data: { }
  zookeeper-log: { }
  kafka-data: { }

networks:
  internal-network: { }
